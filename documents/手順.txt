#命令書:
以下の手順をユーザーとの対話をしながら、順番に実行し、ユーザーの希望に則った制作物を作成すること

#手順:
1.documents/やりたいこと.txtに、自然言語でやりたいことをざっくり書いておく(手順.txtをAIに渡しておく)

2.documents/やりたいこと.txtとdocuments/概要.txtをCursor composerに読み込ませ、AIと相談。AIはユーザーとの対話を行い、概要.txtを埋める。ユーザーのOKが出るまで概要.txtを修正し続ける。
作成ファイル：概要.txt
※概要.txtが完成したら、Composerをリセット推奨としていることにAIは留意すること。

3.documents/概要.txtをもとに、documents/機能要件.txtとdocuments/非機能要件.txtを作成
作成ファイル：documents/機能要件.txt/documents/非機能要件.txt
- パフォーマンス要件
- セキュリティ要件
- ユーザビリティ要件
など

4.要件を元に技術スタックを決定
作成ファイル：documents/技術スタック.txt
- フロントエンド技術
- バックエンド技術
- インフラ構成
など

5.画面一覧のリスト化
作成ファイル：documents/画面一覧.txt

6.documents/画面一覧.txtをもとに、画面遷移をマーメイド形式で作成し、documents/画面遷移.mdに記載
作成ファイル：documents/画面遷移.md

7.テーブル定義について、AIと相談し、documents/テーブル定義.txtを確定
作成ファイル：documents/テーブル定義.txt

8.画面一覧と画面遷移とテーブル定義を元に、ER図をマーメイド形式で作成し、documents/ER図.mdに記載
作成ファイル：documents/ER図.md

9.共通コンポーネントについて、AIと相談し、documents/共通コンポーネント.txtを確定
作成ファイル：documents/共通コンポーネント.txt

10.API設計について、AIと相談し、documents/API設計.txtを確定
作成ファイル：documents/API設計.txt

11.バックエンド処理について、AIと相談し、documents/バックエンド処理.txtを確定
作成ファイル：documents/バックエンド処理.txt

12.ファイル要件について、AIと相談し、documents/ファイル要件.txtを確定
作成ファイル：documents/ファイル要件.txt

13.ログ設計について、AIと相談し、documents/ログ設計.txtを確定
作成ファイル：documents/ログ設計.txt

14.ここまでの作成ファイルすべてをCursor composerに入れ込み、問題点を厳しく指摘させて、改善を行う

15.改善が完了したら、documents/ファイル要件.txtにファイル要件を列挙。作成時には、documents/デザイン規則.txtを入れること。

16.documents/開発環境準備.txtを作成。ここには、開発環境の構築からコーディングを開始するまでを行える手順を箇条書きで詳述。初心者がつまづきやすい点を逐一記載。

17.documents/ファイル要件.txtをもとにコードを作成

#注意:
1.ファイル作成時、必ずトップにファイル要件を書き込むこと。
2.渡されているファイルの内容やユーザーの発言から、現在の手順工程を推定し、その手順工程から再開すること
3.コード更新時、ファイル要件に記載された内容を更新すること。
4.選定された言語に合わせて、ファイル内の要件の書き方を調整すること。
5.ユーザーからの指示がない限り、各ファイルのテンプレートは厳密に守ること。
6.ファイル同士の整合性を保つこと。
7.三連バッククォートは利用しないこと。


# 各ファイルのテンプレート
----------------------------------------
## 機能要件.txt
----------------------------------------
# 機能要件定義書

## 1. システム概要
[システムの目的や全体像を記載]

## 2. 主要機能一覧
### 2.1 [機能カテゴリ1]
- [ ] 機能1-1: [概要]
  - 詳細説明
  - 入力項目
  - 処理内容
  - 出力/期待結果

### 2.2 [機能カテゴリ2]
...

## 3. ユーザー種別と権限
- ユーザー種別1
  - 許可機能
  - 制限事項
...

## 4. データ要件
### 4.1 管理対象データ
- データ項目1
  - 形式
  - 制約
...

## 5. 外部システム連携
- 連携システム名
  - 連携内容
  - データフロー

----------------------------------------
## 非機能要件.txt
----------------------------------------
# 非機能要件定義書

## 1. パフォーマンス要件
### 1.1 応答時間
- ページロード時間: [目標値]
- データ処理時間: [目標値]

### 1.2 同時アクセス
- 想定同時接続数: [数値]
- ピーク時の処理能力: [数値]

## 2. セキュリティ要件
- 認証方式
- アクセス制御
- データ保護方針

## 3. 可用性要件
- サービス提供時間
- メンテナンス方針
- バックアップ要件

## 4. ユーザビリティ要件
- 対応ブラウザ
- レスポンシブ対応
- アクセシビリティ要件

## 5. 運用保守要件
- 監視要件
- 障害対応
- メンテナンス方法

----------------------------------------
## 画面一覧.txt
----------------------------------------
# 画面一覧

## 1. 公開画面
### 1.1 [画面名]
- 画面ID: 
- 概要:
- 主な機能:
- 表示項目:
- 操作項目:

## 2. 管理画面
### 2.1 [画面名]
...

## 3. 共通要素
- ヘッダー
- フッター
- サイドメニュー

----------------------------------------
## 画面遷移.md
----------------------------------------
# 画面遷移図
mermaid
graph TD
A[トップページ] --> B[画面1]
A --> C[画面2]
B --> D[画面3]

## 遷移条件
1. A → B: [条件]
2. A → C: [条件]
...

----------------------------------------
## テーブル定義.txt
----------------------------------------
# テーブル定義書

## テーブル名: [名前]
### 概要
[テーブルの説明]

### カラム定義
| カラム名 | データ型 | NULL | 主キー | 外部キー | 初期値 | 説明 |
|----------|----------|------|---------|-----------|---------|------|
| id       | integer  | NO   | YES     | -         | -       | ID   |
...

### インデックス
- インデックス名:
  - カラム:
  - 種類:

----------------------------------------
## ER図.md
----------------------------------------
# ER図
mermaid
erDiagram
USER ||--o{ POST : creates
POST ||--o{ COMMENT : has

## エンティティ説明
1. USER: [説明]
2. POST: [説明]
...

----------------------------------------
## 共通コンポーネント.txt
----------------------------------------
# 共通コンポーネント定義

## 1. UIコンポーネント
### 1.1 [コンポーネント名]
- 用途:
- Props:
- イベント:
- 使用例:

## 2. ユーティリティ
### 2.1 [ユーティリティ名]
- 機能:
- 引数:
- 戻り値:
- 使用例:

----------------------------------------
## API設計.txt
----------------------------------------
# API設計書

## エンドポイント一覧

### 1. [エンドポイント名]
- Path: `/api/v1/...`
- Method: GET/POST/PUT/DELETE
- 認証: 必要/不要

#### リクエスト
json
{
"key": "value"
}

#### レスポンス
json
{
"status": "success",
"data": {}
}

----------------------------------------
## バックエンド処理.txt
----------------------------------------
# バックエンド処理定義

## 1. [処理名]
### 概要
[処理の説明]

### 処理フロー
1. 入力検証
2. ビジネスロジック
3. データ処理
4. レスポンス生成

### エラー処理
- エラーケース:
- エラー応答:

----------------------------------------
## ファイル要件.txt
----------------------------------------
# ファイル要件定義

## 1. アップロードファイル
### 1.1 [ファイル種類]
- 許可形式:
- サイズ制限:
- 保存場所:
- 命名規則:

## 2. 生成ファイル
### 2.1 [ファイル種類]
...

----------------------------------------
## ログ設計.txt
----------------------------------------
# ログ設計書

## 1. アプリケーションログ
### 1.1 アクセスログ
- 記録項目:
- 出力形式:
- 保存期間:

### 1.2 エラーログ
...

## 2. 監査ログ
- 記録対象:
- 保存方法:

----------------------------------------
## 技術スタック.txt
----------------------------------------
# 技術スタック定義

## Frontend
- フレームワーク:
- 状態管理:
- UIライブラリ:
- ビルドツール:

## Backend
- 言語:
- フレームワーク:
- データベース:
- キャッシュ:

## インフラ（AWS）（要件に応じて、変更可能）
- ホスティング
  - フロント：S3 + CloudFront
    → 静的コンテンツの配信が安価
  - バックエンド：AWS Lambda + API Gateway
    → サーバーレスで運用コスト最小化
  
- データベース：DynamoDB
  → サーバーレスでコスト効率が良い

- 画像ストレージ：S3
  → 容量単位の従量課金

- CI/CD：GitHub Actions + AWS CodeDeploy
  → 無料枠内で収まる

- 監視：CloudWatch
  → 基本的なメトリクスは無料


# 各プログラムファイルのトップに配置するファイル要件のテンプレート（コメントアウトの方法は各言語に合わせて調整すること）
"""
{ファイル名}
概要：
～～～

役割:
- ～～～
- ～～～

主な機能:
- ～～～
- ～～～
- ～～～

使用するクラス/モジュール:
- PySide6.QtWidgets
- data.database.Database
- utils.config.Config

注意点:
- ～～～
- ～～～
※以下は必要に応じ、追加
主なコンポーネント:
- ～～～
"""

{ファイルの中身}

----------------------------------------
## マークダウンファイルのマーメイド記法の指定
----------------------------------------
:::mermaid
graph TD
A[トップページ] --> B[画面1]
A --> C[画面2]
B --> D[画面3]
:::